generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model user {
  id    String @id @default(uuid()) // PostgreSQL uses UUIDs by default for unique identifiers
  email String @unique

  File    File[]
  Message Message[]

  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id           String       @id @default(uuid()) // Using UUID for file IDs in PostgreSQL
  name         String
  uploadStatus UploadStatus @default(PENDING)

  url      String
  key      String
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      user?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
}

model Message {
  id            String  @id @default(uuid()) // UUID for message IDs
  text          String  @db.Text() // Large text field in PostgreSQL
  isUserMessage Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      user?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
  File      File?    @relation(fields: [fileId], references: [id], onDelete: SetNull)
  fileId    String?
}
